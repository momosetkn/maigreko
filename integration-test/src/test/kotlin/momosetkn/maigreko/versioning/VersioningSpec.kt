package momosetkn.maigreko.versioning

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe
import momosetkn.JdbcDatabaseContainerDataSource
import momosetkn.PostgresqlDatabase
import momosetkn.maigreko.change.ChangeSet
import momosetkn.maigreko.change.Column
import momosetkn.maigreko.change.ColumnConstraint
import momosetkn.maigreko.change.CreateTable
import momosetkn.maigreko.sql.PostgreMigrateEngine

class VersioningSpec : FunSpec({
    lateinit var versioning: Versioning
    lateinit var dataSource: javax.sql.DataSource

    beforeSpec {
        PostgresqlDatabase.start()
        val container = PostgresqlDatabase.startedContainer
        dataSource = JdbcDatabaseContainerDataSource(container)
        versioning = Versioning(dataSource, PostgreMigrateEngine)
    }

    beforeEach {
        PostgresqlDatabase.clear()
    }

    val sqlCommentRegex = Regex("^--.*\n", RegexOption.MULTILINE)
    fun String.deleteSqlComments(): String {
        return this.replace(sqlCommentRegex, "")
    }

    context("double forward") {
        test("can migrate") {
            val createTable = CreateTable(
                tableName = "migrations",
                columns = listOf(
                    Column(
                        name = "version",
                        type = "character varying(255)",
                        columnConstraint = ColumnConstraint(primaryKey = true, nullable = false)
                    )
                )
            )

            val changeSet = ChangeSet(
                filename = "filename",
                author = "author",
                changeSetId = "changeSetId",
                changes = listOf(createTable),
            )

            versioning.forward(changeSet)
            versioning.forward(changeSet)

            PostgresqlDatabase.generateDdl().deleteSqlComments() shouldBe """
                --
                -- PostgreSQL database dump
                --


                SET statement_timeout = 0;
                SET lock_timeout = 0;
                SET idle_in_transaction_session_timeout = 0;
                SET transaction_timeout = 0;
                SET client_encoding = 'UTF8';
                SET standard_conforming_strings = on;
                SELECT pg_catalog.set_config('search_path', '', false);
                SET check_function_bodies = false;
                SET xmloption = content;
                SET client_min_messages = warning;
                SET row_security = off;

                --
                -- Name: public; Type: SCHEMA; Schema: -; Owner: test
                --

                -- *not* creating schema, since initdb creates it


                ALTER SCHEMA public OWNER TO test;

                --
                -- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: test
                --

                COMMENT ON SCHEMA public IS '';


                SET default_tablespace = '';

                SET default_table_access_method = heap;

                --
                -- Name: change_set_history; Type: TABLE; Schema: public; Owner: test
                --

                CREATE TABLE public.change_set_history (
                    id bigint NOT NULL,
                    filename character varying(255) NOT NULL,
                    author character varying(255) NOT NULL,
                    change_set_id character varying(255) NOT NULL,
                    tag character varying(255),
                    applied_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
                );


                ALTER TABLE public.change_set_history OWNER TO test;

                --
                -- Name: change_set_history_id_seq; Type: SEQUENCE; Schema: public; Owner: test
                --

                ALTER TABLE public.change_set_history ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.change_set_history_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );


                --
                -- Name: migrations; Type: TABLE; Schema: public; Owner: test
                --

                CREATE TABLE public.migrations (
                    version character varying(255) NOT NULL
                );


                ALTER TABLE public.migrations OWNER TO test;

                --
                -- Name: change_set_history change_set_history_pkey; Type: CONSTRAINT; Schema: public; Owner: test
                --

                ALTER TABLE ONLY public.change_set_history
                    ADD CONSTRAINT change_set_history_pkey PRIMARY KEY (id);


                --
                -- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: test
                --

                ALTER TABLE ONLY public.migrations
                    ADD CONSTRAINT migrations_pkey PRIMARY KEY (version);


                --
                -- Name: SCHEMA public; Type: ACL; Schema: -; Owner: test
                --

                REVOKE USAGE ON SCHEMA public FROM PUBLIC;


                --
                -- PostgreSQL database dump complete
                --


            """.trimIndent().deleteSqlComments()
        }
    }

    context("rollback") {
        test("can migrate") {
            val createTable = CreateTable(
                tableName = "migrations",
                columns = listOf(
                    Column(
                        name = "version",
                        type = "character varying(255)",
                        columnConstraint = ColumnConstraint(primaryKey = true, nullable = false)
                    )
                )
            )

            val changeSet = ChangeSet(
                filename = "filename",
                author = "author",
                changeSetId = "changeSetId",
                changes = listOf(createTable),
            )

            versioning.forward(changeSet)
            versioning.rollback(changeSet)

            PostgresqlDatabase.generateDdl().deleteSqlComments() shouldBe """
                --
                -- PostgreSQL database dump
                --


                SET statement_timeout = 0;
                SET lock_timeout = 0;
                SET idle_in_transaction_session_timeout = 0;
                SET transaction_timeout = 0;
                SET client_encoding = 'UTF8';
                SET standard_conforming_strings = on;
                SELECT pg_catalog.set_config('search_path', '', false);
                SET check_function_bodies = false;
                SET xmloption = content;
                SET client_min_messages = warning;
                SET row_security = off;

                --
                -- Name: public; Type: SCHEMA; Schema: -; Owner: test
                --

                -- *not* creating schema, since initdb creates it


                ALTER SCHEMA public OWNER TO test;

                --
                -- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: test
                --

                COMMENT ON SCHEMA public IS '';


                SET default_tablespace = '';

                SET default_table_access_method = heap;

                --
                -- Name: change_set_history; Type: TABLE; Schema: public; Owner: test
                --

                CREATE TABLE public.change_set_history (
                    id bigint NOT NULL,
                    filename character varying(255) NOT NULL,
                    author character varying(255) NOT NULL,
                    change_set_id character varying(255) NOT NULL,
                    tag character varying(255),
                    applied_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
                );


                ALTER TABLE public.change_set_history OWNER TO test;

                --
                -- Name: change_set_history_id_seq; Type: SEQUENCE; Schema: public; Owner: test
                --

                ALTER TABLE public.change_set_history ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
                    SEQUENCE NAME public.change_set_history_id_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1
                );


                --
                -- Name: change_set_history change_set_history_pkey; Type: CONSTRAINT; Schema: public; Owner: test
                --

                ALTER TABLE ONLY public.change_set_history
                    ADD CONSTRAINT change_set_history_pkey PRIMARY KEY (id);


                --
                -- Name: SCHEMA public; Type: ACL; Schema: -; Owner: test
                --

                REVOKE USAGE ON SCHEMA public FROM PUBLIC;


                --
                -- PostgreSQL database dump complete
                --


            """.trimIndent().deleteSqlComments()
        }
    }
})
