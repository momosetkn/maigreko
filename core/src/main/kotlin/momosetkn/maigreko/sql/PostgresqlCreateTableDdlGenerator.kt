package momosetkn.maigreko.sql

import momosetkn.maigreko.change.Column
import momosetkn.maigreko.change.ColumnConstraint
import momosetkn.maigreko.change.CreateTable
import momosetkn.maigreko.sql.StringUtils.normalizeText

interface PostgresqlCreateTableDdlGenerator : DDLGenerator {
    override fun createTable(
        createTable: CreateTable,
    ): String {
        val ifNotExists = if (createTable.ifNotExists) "if not exists" else ""
        val columns = createTable.columns.joinToString(",\n") {
            listOfNotNull(
                nameWithType(it),
                defaultValueWithAutoIncrement(it),
                it.columnConstraint?.let(::constraint),
            ).joinToString(" ")
        }
        return """
                |create table $ifNotExists ${createTable.tableName} (
                |$columns
                |)
            """.trimMargin().normalizeText()
    }

    private fun constraint(columnConstraint: ColumnConstraint): String {
        return when {
            columnConstraint.primaryKey -> "primary key"
            else -> {
                listOfNotNull(
                    if (columnConstraint.unique) "unique" else null,
                    if (columnConstraint.nullable) null else "not null",
                ).joinToString(" ")
            }
        }
    }

    private fun nameWithType(column: Column): String = listOf(
        column.name,
        column.type,
    ).joinToString(" ")

    private fun defaultValueWithAutoIncrement(column: Column): String {
        return when {
            column.defaultValue == null && column.autoIncrement -> {
                "generated always as identity"
            }

            column.defaultValue != null && column.autoIncrement -> {
                "generated by default as identity"
            }

            column.defaultValue == null && !column.autoIncrement -> {
                ""
            }

            column.defaultValue != null && !column.autoIncrement -> {
                requireNotNull(column.defaultValue)
                "default ${column.defaultValue}"
            }

            else -> {
                error("should not reach here")
            }
        }
    }
}
