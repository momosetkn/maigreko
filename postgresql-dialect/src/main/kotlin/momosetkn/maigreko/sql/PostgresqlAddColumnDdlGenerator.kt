package momosetkn.maigreko.sql

import momosetkn.maigreko.change.AddColumn
import momosetkn.maigreko.change.Column
import momosetkn.maigreko.change.ColumnConstraint
import momosetkn.maigreko.sql.StringUtils.normalizeText

interface PostgresqlAddColumnDdlGenerator : DDLGenerator {
    override fun addColumn(addColumn: AddColumn): String {
        require(addColumn.afterColumn == null && addColumn.beforeColumn == null) {
            "PostgreSQL does not support AFTER or BEFORE clauses in ADD COLUMN statements"
        }

        val column = addColumn.column
        val columnDefinition = listOfNotNull(
            nameWithType(column),
            defaultValueWithAutoIncrement(column),
            column.columnConstraint?.let(::constraint),
        ).joinToString(" ")

        return """
            |alter table ${addColumn.tableName}
            |add column $columnDefinition
            """.trimMargin().normalizeText()
    }

    private fun constraint(columnConstraint: ColumnConstraint): String {
        return when {
            columnConstraint.primaryKey -> "primary key"
            else -> {
                listOfNotNull(
                    if (columnConstraint.unique) "unique" else null,
                    if (columnConstraint.nullable) null else "not null",
                ).joinToString(" ")
            }
        }
    }

    private fun nameWithType(column: Column): String = listOf(
        column.name,
        column.type,
    ).joinToString(" ")

    private fun defaultValueWithAutoIncrement(column: Column): String {
        return when {
            column.defaultValue == null && column.autoIncrement -> {
                "generated always as identity"
            }

            column.defaultValue != null && column.autoIncrement -> {
                "generated by default as identity"
            }

            column.defaultValue == null && !column.autoIncrement -> {
                ""
            }

            column.defaultValue != null && !column.autoIncrement -> {
                requireNotNull(column.defaultValue)
                "default ${column.defaultValue}"
            }

            else -> {
                error("should not reach here")
            }
        }
    }
}