package momosetkn.maigreko.sql

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.string.shouldContain
import momosetkn.maigreko.change.Column
import momosetkn.maigreko.change.ColumnConstraint
import momosetkn.maigreko.change.CreateTable
import momosetkn.maigreko.change.PostgresqlColumnIndividualObject

class PostgresqlCreateTableDdlGeneratorTest : FunSpec({
    val generator = PostgresqlDdlGenerator()

    test("should generate DDL with custom IDENTITY parameters") {
        // Create a column with custom IDENTITY parameters
        val column = Column(
            name = "id_custom",
            type = "integer",
            autoIncrement = true,
            identityGeneration = Column.IdentityGeneration.BY_DEFAULT,
            startValue = 100,
            incrementBy = 10,
            columnConstraint = ColumnConstraint(
                nullable = false,
                primaryKey = true
            ),
            individualObject = PostgresqlColumnIndividualObject(
                PostgresqlColumnIndividualObject.GeneratedKind.IDENTITY
            )
        )

        // Create a table with the column
        val createTable = CreateTable(
            tableName = "test_table",
            columns = listOf(column)
        )

        // Generate DDL
        val ddl = generator.createTable(createTable)

        // Verify DDL contains custom IDENTITY parameters
        ddl shouldContain "id_custom integer"
        ddl shouldContain "generated by default as identity (START WITH 100 INCREMENT BY 10)"
        ddl shouldContain "primary key"
    }

    test("should generate DDL with CYCLE option") {
        // Create a column with CYCLE option
        val column = Column(
            name = "id_cycle",
            type = "integer",
            autoIncrement = true,
            identityGeneration = Column.IdentityGeneration.BY_DEFAULT,
            cycle = true,
            columnConstraint = ColumnConstraint(
                nullable = false
            ),
            individualObject = PostgresqlColumnIndividualObject(
                PostgresqlColumnIndividualObject.GeneratedKind.IDENTITY
            )
        )

        // Create a table with the column
        val createTable = CreateTable(
            tableName = "test_table",
            columns = listOf(column)
        )

        // Generate DDL
        val ddl = generator.createTable(createTable)

        // Verify DDL contains CYCLE option
        ddl shouldContain "id_cycle integer"
        ddl shouldContain "generated by default as identity (CYCLE)"
        ddl shouldContain "not null"
    }

    test("should generate DDL with NO CYCLE option") {
        // Create a column with NO CYCLE option
        val column = Column(
            name = "id_no_cycle",
            type = "integer",
            autoIncrement = true,
            identityGeneration = Column.IdentityGeneration.BY_DEFAULT,
            cycle = true,
            columnConstraint = ColumnConstraint(
                nullable = false
            ),
            individualObject = PostgresqlColumnIndividualObject(
                PostgresqlColumnIndividualObject.GeneratedKind.IDENTITY
            )
        )

        // Create a table with the column
        val createTable = CreateTable(
            tableName = "test_table",
            columns = listOf(column)
        )

        // Generate DDL
        val ddl = generator.createTable(createTable)

        // Verify DDL contains NO CYCLE option
        ddl shouldContain "id_no_cycle integer"
        ddl shouldContain "generated by default as identity (CYCLE)"
        ddl shouldContain "not null"
    }

    test("should generate DDL with multiple IDENTITY parameters") {
        // Create a column with multiple IDENTITY parameters
        val column = Column(
            name = "id_all",
            type = "integer",
            autoIncrement = true,
            identityGeneration = Column.IdentityGeneration.ALWAYS,
            startValue = 100,
            incrementBy = 10,
            cycle = true,
            columnConstraint = ColumnConstraint(
                nullable = false,
                primaryKey = true
            ),
            individualObject = PostgresqlColumnIndividualObject(
                PostgresqlColumnIndividualObject.GeneratedKind.IDENTITY
            )
        )

        // Create a table with the column
        val createTable = CreateTable(
            tableName = "test_table",
            columns = listOf(column)
        )

        // Generate DDL
        val ddl = generator.createTable(createTable)

        // Verify DDL contains all IDENTITY parameters
        ddl shouldContain "id_all integer"
        ddl shouldContain "generated always as identity (START WITH 100 INCREMENT BY 10 CYCLE)"
        ddl shouldContain "primary key"
    }
})
